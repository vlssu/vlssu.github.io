import{_ as i,r as s,o as c,c as r,b as e,d as a,e as o,w as p,a as l,f as t}from"./app-773a3149.js";const u={},h=e("div",{class:"custom-container tip"},[e("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[e("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[e("circle",{cx:"12",cy:"12",r:"9"}),e("path",{d:"M12 8h.01"}),e("path",{d:"M11 12h1v4h1"})])]),e("p",{class:"custom-container-title"},"TIP"),e("p",null,"我看到一个下载的bilibili视频的程序，贼好用但是需要Python3.9，就是我上一篇文章不是写了Python3.9的安装教程吗。其实最主要是Python安装有点反人类，至少在win上面，所以我只能在我习惯的linux上部署了。")],-1),m={href:"https://github.com/SigureMo/yutto",target:"_blank",rel:"noopener noreferrer"},b=e("strong",null,"[在Ubuntu如何安装Python3.9（Ubuntu 20.04）]",-1),v=t(`<h2 id="安装yutto" tabindex="-1"><a class="header-anchor" href="#安装yutto" aria-hidden="true">#</a> 安装yutto</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> <span class="token parameter variable">--pre</span> yutto
<span class="token comment"># 用于加速的</span>
pip <span class="token function">install</span> uvloop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="记得安装一下ffmpeg" tabindex="-1"><a class="header-anchor" href="#记得安装一下ffmpeg" aria-hidden="true">#</a> 记得安装一下ffmpeg</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">apt</span> <span class="token function">install</span> ffmpeg
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,4),g={class:"custom-container details"},k=t('<summary class="custom-container-title">yutto</summary><h4 id="最大并行-worker-数量" tabindex="-1"><a class="header-anchor" href="#最大并行-worker-数量" aria-hidden="true">#</a> 最大并行 worker 数量</h4><ul><li>参数 <code>-n</code> 或 <code>--num-workers</code></li><li>默认值 <code>8</code></li></ul><p>与 bilili 不同的是，yutto 并不是使用多线程实现并行下载，而是使用协程实现的，本参数限制的是最大的并行 Worker 数量。</p><h4 id="指定视频清晰度等级" tabindex="-1"><a class="header-anchor" href="#指定视频清晰度等级" aria-hidden="true">#</a> 指定视频清晰度等级</h4><ul><li>参数 <code>-q</code> 或 <code>--video-quality</code></li><li>可选值 <code>125 | 120 | 116 | 112 | 80 | 74 | 64 | 32 | 16</code></li><li>默认值 <code>125</code></li></ul><p>清晰度对应关系如下</p>',7),x=t('<table><thead><tr><th style="text-align:center;">code</th><th style="text-align:center;">清晰度</th></tr></thead><tbody><tr><td style="text-align:center;">125</td><td style="text-align:center;">HDR 真彩</td></tr><tr><td style="text-align:center;">120</td><td style="text-align:center;">4K 超清</td></tr><tr><td style="text-align:center;">116</td><td style="text-align:center;">1080P 60帧</td></tr><tr><td style="text-align:center;">112</td><td style="text-align:center;">1080P 高码率</td></tr><tr><td style="text-align:center;">80</td><td style="text-align:center;">1080P 高清</td></tr><tr><td style="text-align:center;">74</td><td style="text-align:center;">720P 60帧</td></tr><tr><td style="text-align:center;">64</td><td style="text-align:center;">720P 高清</td></tr><tr><td style="text-align:center;">32</td><td style="text-align:center;">480P 清晰</td></tr><tr><td style="text-align:center;">16</td><td style="text-align:center;">360P 流畅</td></tr></tbody></table><p>并不是说指定某个清晰度就一定会下载该清晰度的视频，yutto 只会尽可能满足你的要求，如果不存在指定的清晰度，yutto 就会按照默认的清晰度搜索机制进行调节，比如指定清晰度为 <code>80</code>，<strong>首先会依次降清晰度搜索</strong> <code>74</code>、<code>64</code>、<code>32</code>、<code>16</code>，如果依然找不到合适的则<strong>继续升清晰度搜索</strong> <code>112</code>、<code>116</code>、<code>120</code>、<code>125</code>。</p><h4 id="指定音频码率等级" tabindex="-1"><a class="header-anchor" href="#指定音频码率等级" aria-hidden="true">#</a> 指定音频码率等级</h4><ul><li>参数 <code>-aq</code> 或 <code>--audio-quality</code></li><li>可选值 <code>30280 | 30232 | 30216</code></li><li>默认值 <code>30280</code></li></ul><p>码率对应关系如下</p>',5),y=t('<table><thead><tr><th style="text-align:center;">code</th><th style="text-align:center;">码率</th></tr></thead><tbody><tr><td style="text-align:center;">30280</td><td style="text-align:center;">320kbps</td></tr><tr><td style="text-align:center;">30232</td><td style="text-align:center;">128kbps</td></tr><tr><td style="text-align:center;">30216</td><td style="text-align:center;">64kbps</td></tr></tbody></table><p>清晰度自动调节机制与视频清晰度一致，也采用先降后升的匹配机制。</p><h4 id="指定视频编码" tabindex="-1"><a class="header-anchor" href="#指定视频编码" aria-hidden="true">#</a> 指定视频编码</h4><ul><li>参数 <code>--vcodec</code></li><li>下载编码可选值 <code>&quot;hevc&quot; | &quot;avc&quot;</code></li><li>保存编码可选值 FFmpeg 所有可用的视频编码器</li><li>默认值 <code>&quot;avc:copy&quot;</code></li></ul><p>该参数略微复杂，前半部分表示在下载时<strong>优先</strong>选择哪一种编码的视频流，后半部分则表示在合并时如何编码视频流，两者使用 <code>:</code> 分隔。</p><p>值得注意的是，前半的下载编码只是优先下载的编码而已，如果不存在该编码，则仍会像视频清晰度调节机制一样自动选择其余编码。</p><p>而后半部分的参数如果设置成非 <code>copy</code> 的值则可以确保在下载完成后对其进行重新编码，而且不止支持 <code>hevc</code> 与 <code>avc</code>，只要你的 FFmpeg 支持的视频编码器，它都可以完成。</p><h4 id="指定音频编码" tabindex="-1"><a class="header-anchor" href="#指定音频编码" aria-hidden="true">#</a> 指定音频编码</h4><ul><li>参数 <code>--acodec</code></li><li>下载编码可选值 <code>&quot;mp4a&quot;</code></li><li>保存编码可选值 FFmpeg 所有可用的音频编码器</li><li>默认值 <code>&quot;mp4a:copy&quot;</code></li></ul><p>详情同视频编码。</p><h4 id="仅下载视频流" tabindex="-1"><a class="header-anchor" href="#仅下载视频流" aria-hidden="true">#</a> 仅下载视频流</h4><ul><li>参数 <code>--video-only</code></li><li>默认值 <code>False</code></li></ul><h4 id="仅下载音频流" tabindex="-1"><a class="header-anchor" href="#仅下载音频流" aria-hidden="true">#</a> 仅下载音频流</h4><ul><li>参数 <code>--audio-only</code></li><li>默认值 <code>False</code></li></ul><p>仅下载其中的音频流，保存为 <code>.aac</code> 文件。</p><p>值得注意的是，在不选择视频流时，嵌入字幕、弹幕功能将无法工作。</p><h4 id="弹幕格式选择" tabindex="-1"><a class="header-anchor" href="#弹幕格式选择" aria-hidden="true">#</a> 弹幕格式选择</h4><ul><li>参数 <code>-df</code> 或 <code>--danmaku-format</code></li><li>可选值 <code>&quot;ass&quot; | &quot;xml&quot; | &quot;protobuf&quot;</code></li><li>默认值 <code>&quot;ass&quot;</code></li></ul>',18),_=e("code",null,"xml",-1),f=e("code",null,"protobuf",-1),q=e("code",null,"xml",-1),w=e("code",null,"ass",-1),S=e("code",null,"xml",-1),F=e("code",null,"protobuf",-1),A={href:"https://github.com/ShigureLab/biliass",target:"_blank",rel:"noopener noreferrer"},P={href:"https://tiansh.github.io/us-danmaku/bilibili/",target:"_blank",rel:"noopener noreferrer"},C=t(`<p>如果你不想下载弹幕，只需要使用参数 <code>--no-danmaku</code> 即可。</p><h4 id="下载块大小" tabindex="-1"><a class="header-anchor" href="#下载块大小" aria-hidden="true">#</a> 下载块大小</h4><ul><li>参数 <code>-bs</code> 或 <code>--block-size</code></li><li>默认值 <code>0.5</code></li></ul><p>以 MiB 为单位，为分块下载时各块大小，不建议更改。</p><h4 id="强制覆盖已下载文件" tabindex="-1"><a class="header-anchor" href="#强制覆盖已下载文件" aria-hidden="true">#</a> 强制覆盖已下载文件</h4><ul><li>参数 <code>-w</code> 或 <code>--overwrite</code></li><li>默认值 <code>False</code></li></ul><h4 id="代理设置" tabindex="-1"><a class="header-anchor" href="#代理设置" aria-hidden="true">#</a> 代理设置</h4><ul><li>参数 <code>-x</code> 或 <code>--proxy</code></li><li>可选值 <code>&quot;auto&quot; | &quot;no&quot; | &lt;https?://url/to/proxy/server&gt;</code></li><li>默认值 <code>&quot;auto&quot;</code></li></ul><p>设置代理服务器，默认是从环境变量读取，<code>no</code> 则为不设置代理，设置其它 http/https url 则将其作为代理服务器。</p><h4 id="存放根目录" tabindex="-1"><a class="header-anchor" href="#存放根目录" aria-hidden="true">#</a> 存放根目录</h4><ul><li>参数 <code>-d</code> 或 <code>--dir</code></li><li>默认值 <code>&quot;./&quot;</code></li></ul><h4 id="存放子路径模板" tabindex="-1"><a class="header-anchor" href="#存放子路径模板" aria-hidden="true">#</a> 存放子路径模板</h4><ul><li>参数 <code>-tp</code> 或 <code>--subpath-template</code></li><li>可选参数变量 <code>title | id | name | username | fav_title</code> （以后可能会有更多）</li><li>默认值 <code>&quot;{auto}&quot;</code></li></ul><p>通过配置子路径模板可以灵活地控制视频存放位置。</p><p>默认情况是由 yutto 自动控制存放位置的。比如下载单个视频时默认就是直接存放在设定的根目录，不会创建一层容器目录，此时自动选择了 <code>{name}</code> 作为模板；而批量下载时则会根据视频层级生成多级目录，比如番剧会是 <code>{title}/{name}</code>，首先会在设定根目录里生成一个番剧名的目录，其内才会存放各个番剧剧集视频，这样方便了多个不同番剧的管理。当然，如果你仍希望将番剧直接存放在设定根目录下的话，可以修改该参数值为 <code>{name}</code>即可。</p><p>另外，该功能语法由 Python format 函数模板语法提供，所以也支持一些高级的用法，比如 <code>{id:0&gt;3}{name}</code>。</p><p>值得注意的是，并不是所有变量在各种场合下都会提供，比如 <code>username</code> 变量当前仅在 UP 主全部投稿视频/收藏夹才提供，在其它情况下不应使用它。</p><h4 id="url-别名文件路径" tabindex="-1"><a class="header-anchor" href="#url-别名文件路径" aria-hidden="true">#</a> url 别名文件路径</h4><ul><li>参数 <code>-af</code> 或 <code>--alias-file</code></li><li>默认值 <code>None</code></li></ul><p>指定别名文件路径，别名文件中存放一个别名与其对应的 url，使用空格或者 <code>=</code> 分隔，示例如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>rimuru1=https://www.bilibili.com/bangumi/play/ss25739/
rimuru2=https://www.bilibili.com/bangumi/play/ss36170/
rimuru-nikki=https://www.bilibili.com/bangumi/play/ss38221/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如将上述内容存储到 <code>~/.yutto_alias</code>，则通过以下命令即可解析该文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yutto rimuru1 <span class="token parameter variable">--batch</span> --alias-file<span class="token operator">=</span><span class="token string">&#39;~/.yutto_alias&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当参数值为 <code>-</code> 时，会从标准输入中读取：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cat</span> ~/.yutto_alias <span class="token operator">|</span> yutto rimuru-nikki <span class="token parameter variable">--batch</span> --alias-file -
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="cookies-设置" tabindex="-1"><a class="header-anchor" href="#cookies-设置" aria-hidden="true">#</a> Cookies 设置</h4><ul><li>参数 <code>-c</code> 或 <code>--sessdata</code></li><li>默认值 <code>&quot;&quot;</code></li></ul><p>设置 Cookies 后你才可以下载更高清晰度以及更多的剧集，当你传入你的大会员 <code>SESSDATA</code> 时（当然前提是你是大会员），你就可以下载大会员可访问的资源咯。</p>`,28),E=e("summary",null," SESSDATA 获取方式 ",-1),B=e("p",null,"这里用 Chrome 作为示例，其它浏览器请尝试类似方法。",-1),D={href:"https://www.bilibili.com/",target:"_blank",rel:"noopener noreferrer"},T=e("p",null,[a("按 F12 打开开发者工具，切换到 Network 栏，刷新页面，此时第一个加载的资源应该就是当前页面的 html，选中该资源，在右侧 「Request Headers」 中找到 「cookie」，在其中找到类似于 "),e("code",null,"SESSDATA=d8bc7493%2C2843925707%2C08c3e*81;"),a(" 的一串字符串，复制这里的 "),e("code",null,"d8bc7493%2C2843925707%2C08c3e*81"),a("，这就是你需要的 "),e("code",null,"SESSDATA"),a("。")],-1),N=t(`<p>另外，由于 SESSDATA 中可能有特殊符号，所以传入时你可能需要使用双引号来包裹</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yutto <span class="token operator">&lt;</span>url<span class="token operator">&gt;</span> <span class="token parameter variable">-c</span> <span class="token string">&quot;d8bc7493%2C2843925707%2C08c3e*81&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当然，示例里的 SESSDATA 是无效的，请使用自己的 SESSDATA。</p><h4 id="不下载弹幕" tabindex="-1"><a class="header-anchor" href="#不下载弹幕" aria-hidden="true">#</a> 不下载弹幕</h4><ul><li>参数 <code>--no-danmaku</code></li><li>默认值 <code>False</code></li></ul><h4 id="不下载字幕" tabindex="-1"><a class="header-anchor" href="#不下载字幕" aria-hidden="true">#</a> 不下载字幕</h4><ul><li>参数 <code>--no-subtitle</code></li><li>默认值 <code>False</code></li></ul><h4 id="不显示颜色" tabindex="-1"><a class="header-anchor" href="#不显示颜色" aria-hidden="true">#</a> 不显示颜色</h4><ul><li>参数 <code>--no-color</code></li><li>默认值 <code>False</code></li></ul><h4 id="启用-debug-模式" tabindex="-1"><a class="header-anchor" href="#启用-debug-模式" aria-hidden="true">#</a> 启用 Debug 模式</h4><ul><li>参数 <code>--debug</code></li><li>默认值 <code>False</code></li></ul>`,11),$=t(`<details class="custom-container details"><summary class="custom-container-title">批量参数</summary><p>有些参数是只有批量下载时才可以使用的</p><h4 id="启用批量下载" tabindex="-1"><a class="header-anchor" href="#启用批量下载" aria-hidden="true">#</a> 启用批量下载</h4><ul><li>参数 <code>-b</code> 或 <code>--batch</code></li><li>默认值 <code>False</code></li></ul><p>只需要 <code>yutto --batch &lt;url&gt;</code> 即可启用批量下载功能。</p><h4 id="选集" tabindex="-1"><a class="header-anchor" href="#选集" aria-hidden="true">#</a> 选集</h4><ul><li><p>参数 <code>-p</code> 或 <code>--episodes</code></p></li><li><p>默认值 <code>^~$</code></p></li><li><p>参数 <code>-p</code> 或 <code>--episodes</code></p></li><li><p>默认值 <code>^~$</code>（也即全选）</p></li></ul><p>也就是选集咯，其语法是这样的</p><ul><li><code>&lt;p1&gt;</code> 单独下某一剧集 <ul><li>支持负数来选择倒数第几话</li><li>此外还可以使用 <code>^</code> 与 <code>$</code> 来分别代表 <code>1</code> 与 <code>-1</code></li></ul></li><li><code>&lt;p_start&gt;~&lt;p_end&gt;</code> 使用 <code>~</code> 可以连续选取</li><li><code>&lt;p1&gt;,&lt;p2&gt;,&lt;p3&gt;,...,&lt;pn&gt;</code> 使用 <code>,</code> 可以不连续选取</li></ul><p>emmm，直接看的话大概并不能知道我在说什么，所以我们通过几个小例子来了解其语法</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 假设要下载一个具有 24 话的番剧</span>
<span class="token comment"># 如果我们只想下载第 3 话，只需要这样</span>
yutto <span class="token operator">&lt;</span>url<span class="token operator">&gt;</span> <span class="token parameter variable">-b</span> <span class="token parameter variable">-p</span> <span class="token number">3</span>
<span class="token comment"># 那如果我想下载第 5 话到第 7 话呢，使用 \`~\` 可以连续选中</span>
yutto <span class="token operator">&lt;</span>url<span class="token operator">&gt;</span> <span class="token parameter variable">-b</span> <span class="token parameter variable">-p</span> <span class="token number">5</span>~7
<span class="token comment"># 那我想下载第 12 话和第 17 话又要怎么办？此时只需要 \`,\` 就可以将多个不连续的选集一起选中</span>
yutto <span class="token operator">&lt;</span>url<span class="token operator">&gt;</span> <span class="token parameter variable">-b</span> <span class="token parameter variable">-p</span> <span class="token number">12,17</span>
<span class="token comment"># 那我突然又想将刚才那些都选中了呢？还是使用 \`,\` 呀，将它们连在一起即可</span>
yutto <span class="token operator">&lt;</span>url<span class="token operator">&gt;</span> <span class="token parameter variable">-b</span> <span class="token parameter variable">-p</span> <span class="token number">3,5</span>~7,12,17
<span class="token comment"># 嗯，你已经把基本用法都了解过了，很简单吧～</span>
<span class="token comment"># 下面是一些语法糖，不了解也完全不会影响任何功能哒～</span>
<span class="token comment"># 那如果我只知道我想下载倒数第 3 话，而不想算倒数第三话是第几话应该怎么办？</span>
<span class="token comment"># 此时可以用负数哒～不过要注意的是，开头如果是 \`-\` 的话前面应该使用 \`=\`</span>
yutto <span class="token operator">&lt;</span>url<span class="token operator">&gt;</span> <span class="token parameter variable">-b</span> <span class="token parameter variable">-p</span><span class="token operator">=</span>-3
<span class="token comment"># 那么如果想下载最后一话你可能会想到 \`-p=-1\` 对吧？不过我内置了两个符号分别代表第一话（^）和最后一话（$）</span>
<span class="token comment"># 像下面这样就可以直接下载最后一话啦～</span>
yutto <span class="token operator">&lt;</span>url<span class="token operator">&gt;</span> <span class="token parameter variable">-b</span> <span class="token parameter variable">-p</span> $
<span class="token comment"># 所有语法都了解完啦，我们看一个稍微复杂的例子</span>
yutto <span class="token operator">&lt;</span>url<span class="token operator">&gt;</span> <span class="token parameter variable">-b</span> <span class="token parameter variable">-p</span> ^~3,10,12~14,16,-4~$
<span class="token comment"># 很明显，上面的例子就是下载前 3 话、第 10 话、第 12 到 14 话、第 16 话以及后 4 话</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是一些要注意的问题</p><ol><li>这里使用的序号是视频的顺序序号，而不是番剧所标注的<code>第 n 话</code>，因为有可能会出现 <code>第 x.5 话</code> 等等的特殊情况，此时一定要按照顺序自行计数。</li><li>参数值里一定不要加空格</li><li>参数值开头为 <code>-</code> 时前面应该使用 <code>=</code> 而非空格</li></ol><h4 id="同时下载附加剧集" tabindex="-1"><a class="header-anchor" href="#同时下载附加剧集" aria-hidden="true">#</a> 同时下载附加剧集</h4><ul><li>参数 <code>-s</code> 或 <code>--with-section</code></li><li>默认值 <code>False</code></li></ul></details>`,1);function L(V,M){const n=s("ExternalLinkIcon"),d=s("RouterLink");return c(),r("div",null,[h,e("p",null,[a("::: theorem yutto 一个可爱且任性的 B 站视频下载器（bilili2.x） ::: right 来自 "),e("a",m,[a("Github"),o(n)]),a(" :::")]),e("p",null,[o(d,{to:"/blogs/tech-sharing/linux/python3.9.html"},{default:p(()=>[b]),_:1})]),v,e("details",g,[k,l(" prettier-ignore "),x,l(" prettier-ignore "),y,e("p",null,[a("B 站提供了 "),_,a(" 与 "),f,a(" 两种弹幕数据接口，yutto 会自动下载 "),q,a(" 格式弹幕并转换为 "),w,a(" 格式，如果你不喜欢 yutto 自动转换的效果，可以选择输出格式为 "),S,a(" 或 "),F,a("，手动通过一些工具进行转换，比如 yutto 和 bilili 所使用的 "),e("a",A,[a("biliass"),o(n)]),a("，或者使用 "),e("a",P,[a("us-danmaku"),o(n)]),a(" 进行在线转换。")]),C,e("details",null,[E,B,e("p",null,[a("首先，用你的帐号登录 B 站，然后随便打开一个 B 站网页，比如"),e("a",D,[a("首页"),o(n)]),a("。")]),T]),N]),$])}const I=i(u,[["render",L],["__file","yutto.html.vue"]]);export{I as default};
