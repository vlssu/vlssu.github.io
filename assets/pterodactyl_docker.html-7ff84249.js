import{_ as r,r as c,o as l,c as i,b as e,d as s,e as a,w as d,f as o}from"./app-8a0077b2.js";const p={},u=e("p",null,"翼龙面板运行在您自己的 Web 服务器上。为了运行和使用这个面板，您需要对您的服务器具有 root 访问权限。",-1),m=e("p",null,[s("您需要了解如何阅读文档以使用此面板。我们花了很多时间详细介绍如何安装或升级我们的软件； 所以你也要花点时间去阅读而不是复制粘贴，然后在事情不起作用时候而抱怨。 此面板不作为运行服务器的拖放服务存在。 这是一个高度复杂的系统，需要多个依赖项，并且使用搭建他的网站管理人员需要付出一些时间学习如何使用它。"),e("strong",null,"如果您希望能够在不了解基本 linux 系统管理的情况下安装它，您现在应该停下来然后出门左拐。")],-1),h=e("h2",{id:"选择服务器操作系统",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#选择服务器操作系统","aria-hidden":"true"},"#"),s(" 选择服务器操作系统")],-1),k=e("p",null,"翼龙可在多种操作系统上运行，因此请选择最适合您使用的操作系统。",-1),b=e("div",{class:"custom-container warning"},[e("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[e("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[e("circle",{cx:"12",cy:"12",r:"9"}),e("path",{d:"M12 8v4"}),e("path",{d:"M12 16h.01"})])]),e("p",{class:"custom-container-title"},"WARNING"),e("p",null,[s("由于与 Docker 不兼容，翼龙不支持大多数 OpenVZ 系统。如果您计划在基于 OpenVZ 的系统上运行此软件，您将很大概率不会成功。"),e("br"),s(" 不过本页的教程并不会有太多的限制，只要阁下前端服务器能装 "),e("code",null,"Docker"),s(" 和 "),e("code",null,"Docker Compose"),s("，就可以采用本页教程来搭建翼龙面板前端了。一般服务器均能满足前端的搭建要求。 只要能装 "),e("strong",null,"Docker Compose"),s(" 并运行，就没有系统的限制。")])],-1),v=o(`<h2 id="安装-docker" tabindex="-1"><a class="header-anchor" href="#安装-docker" aria-hidden="true">#</a> 安装 Docker</h2><p>如需快速安装 Docker 社区版，您可以执行以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-sSL</span> https://get.docker.com/ <span class="token operator">|</span> <span class="token assign-left variable">CHANNEL</span><span class="token operator">=</span>stable <span class="token function">bash</span>
<span class="token comment"># 如果速度过慢可以尝试阿里云源</span>
<span class="token function">curl</span> <span class="token parameter variable">-sSL</span> https://get.docker.com/ <span class="token operator">|</span> <span class="token assign-left variable">CHANNEL</span><span class="token operator">=</span>stable <span class="token function">bash</span> <span class="token parameter variable">-s</span> <span class="token function">docker</span> <span class="token parameter variable">--mirror</span> Aliyun
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果您希望手动安装，请参考官方 Docker 文档了解如何在您的服务器上安装 Docker 社区版。下面列出了一些常用系统支持的快速链接。</p>`,4),_={href:"https://docs.docker.com/install/linux/docker-ce/ubuntu/#install-docker-ce",target:"_blank",rel:"noopener noreferrer"},g={href:"https://docs.docker.com/install/linux/docker-ce/centos/#install-docker-ce",target:"_blank",rel:"noopener noreferrer"},x={href:"https://docs.docker.com/install/linux/docker-ce/debian/#install-docker-ce",target:"_blank",rel:"noopener noreferrer"},f={class:"custom-container warning"},w=e("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[e("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[e("circle",{cx:"12",cy:"12",r:"9"}),e("path",{d:"M12 8v4"}),e("path",{d:"M12 16h.01"})])],-1),y=e("p",{class:"custom-container-title"},"检查你的内核",-1),D=e("code",null,"uname -r",-1),C=e("code",null,"-xxxx-grs-ipv6-64",-1),N=e("code",null,"-xxxx-mod-std-ipv6-64",-1),L=o(`<h3 id="在启动时启动-docker" tabindex="-1"><a class="header-anchor" href="#在启动时启动-docker" aria-hidden="true">#</a> 在启动时启动 Docker</h3><p>如果您使用的是带有 systemd 的操作系统（Ubuntu 16+、Debian 8+、CentOS 7+），请运行以下命令以在您启动机器时启动 Docker。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl <span class="token builtin class-name">enable</span> <span class="token parameter variable">--now</span> <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="安装-docker-compose" tabindex="-1"><a class="header-anchor" href="#安装-docker-compose" aria-hidden="true">#</a> 安装 Docker Compose</h2>`,4),E=e("code",null,"yum",-1),M=e("code",null,"apt",-1),A={href:"https://github.com/docker/compose/releases%E3%80%82",target:"_blank",rel:"noopener noreferrer"},B=o(`<p>运行以下命令来下载 Docker Compose 的当前稳定版本：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token string">&quot;https://github.com/docker/compose/releases/latest/download/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span>&quot;</span> <span class="token parameter variable">-o</span> /usr/local/bin/docker-compose
<span class="token comment"># 若阁下在上条指令上无法正常拉取压缩包或者拉取缓慢 可使用 gh-proxy 提供的CF反向代理来拉取</span>
<span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token string">&quot;https://ghproxy.com/https://github.com/docker/compose/releases/latest/download/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span>&quot;</span> <span class="token parameter variable">-o</span> /usr/local/bin/docker-compose
<span class="token comment"># 将可执行权限应用于二进制文件并创建软链</span>
<span class="token function">chmod</span> +x /usr/local/bin/docker-compose
<span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/local/bin/docker-compose /usr/bin/docker-compose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="下载文件" tabindex="-1"><a class="header-anchor" href="#下载文件" aria-hidden="true">#</a> 下载文件</h2><p>在进行此步骤之前，我们要为 <code>docker-compose.yml</code> 创建一个放置目录。<br> 此过程的第一步是创建面板所在的文件夹，然后进入新创建的文件夹中。以下是如何执行此操作的示例。</p>`,4),R=e("div",{class:"custom-container warning"},[e("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[e("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[e("circle",{cx:"12",cy:"12",r:"9"}),e("path",{d:"M12 8v4"}),e("path",{d:"M12 16h.01"})])]),e("p",{class:"custom-container-title"},"WARNING"),e("p",null,"以下命令使用的路径仅为示例，阁下大可自己自定义路径，但是我在此提醒您，若您不用我示例使用的路径，请务必记住自己设置的程序所在的目录，并在后续各种涉及到程序运行目录的地方灵活操作！")],-1),V=o(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /var/www/pterodactyl
<span class="token builtin class-name">cd</span> /var/www/pterodactyl
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在为面板创建好它的放置目录后，我们将使用 <code>curl</code> 命令，从 Github 拉取翼龙中国汉化完成的 <code>docker-compose.yml</code> 文件并赋予该文件的可执行权限。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-Lo</span> docker-compose.yml https://raw.githubusercontent.com/pterodactyl-china/panel/1.0-develop/docker-compose.example.yml
<span class="token comment"># 将可执行权限应用于yml文件</span>
<span class="token function">chmod</span> +x docker-compose.yml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="环境变量" tabindex="-1"><a class="header-anchor" href="#环境变量" aria-hidden="true">#</a> 环境变量</h3><p>当您不提供自己的 <code>.env</code> 文件时，有多个环境变量可以配置面板，有关每个可用选项的详细信息</p>`,5),G=e("code",null,"docker-compose.yml",-1),S={href:"https://github.com/pterodactyl-china/panel/blob/1.0-develop/.github/docker/README.md",target:"_blank",rel:"noopener noreferrer"},q={href:"https://gitee.com/vlssu/pterodactyl-panel/blob/1.0-develop/.github/docker/README.md",target:"_blank",rel:"noopener noreferrer"},I=o(`<p>如果你想变更数据的存储目录，可以自行查看文件，如果你并不会或不懂，请不要更改</p><h2 id="部署运行" tabindex="-1"><a class="header-anchor" href="#部署运行" aria-hidden="true">#</a> 部署运行</h2><p>在设置完环境变量，我们就可以通过 Docker Compose 使用 <code>docker-compose.yml</code> 文件来启动面板了</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 在后台执行该服务</span>
<span class="token comment"># -d 参数是让该程序在后台执行，如果你需要排查错误等情况你可以去除该参数</span>
<span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="添加首位用户" tabindex="-1"><a class="header-anchor" href="#添加首位用户" aria-hidden="true">#</a> 添加首位用户</h3><p>您需要为面板创建一个管理用户，以便您可以登录面板。 为此，请运行以下命令。 并保证账户密码满足以下要求：8 个字符，大小写混合，至少一个数字。(此指令需在上文中含有 <code>docker-compose.yml</code> 的同级目录中执行）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> <span class="token builtin class-name">exec</span> panel php artisan p:user:make
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在，你已经全部设置完毕，直接输入你的网站地址，即可访问翼龙面板</p>`,8);function O($,j){const n=c("ExternalLinkIcon"),t=c("RouterLink");return l(),i("div",null,[u,m,h,k,b,v,e("ul",null,[e("li",null,[e("a",_,[s("Ubuntu"),a(n)])]),e("li",null,[e("a",g,[s("CentOS"),a(n)])]),e("li",null,[e("a",x,[s("Debian"),a(n)])])]),e("div",f,[w,y,e("p",null,[s("请注意，某些主机安装了不支持 docker 重要功能的修改内核。 请通过运行 "),D,s(" 检查您的内核。 如果您的内核以 "),C,s(" 或 "),N,s(" 结尾，您可能使用的是不受支持的内核。 查看我们的 "),a(t,{to:"/daemon/0.6/kernel_modifications.html"},{default:d(()=>[s("内核修改")]),_:1}),s(" 指南了解详细信息。")])]),L,e("p",null,[s("虽然 "),E,s(),M,s(" 有快速安装的软件包，但版本一般不是最新的。最新发行的版本地址："),e("a",A,[s("https://github.com/docker/compose/releases。"),a(n)])]),B,R,V,e("p",null,[s("在 "),G,s(" 文件中可以设置，具体变量的详细信息可查看 在 "),e("a",S,[s("GitHub 仓库中提供的文档"),a(n)]),s(" 或查看 "),e("a",q,[s("Gitee 镜像仓库中提供的文档(可能不是最新的)"),a(n)])]),I])}const W=r(p,[["render",O],["__file","pterodactyl_docker.html.vue"]]);export{W as default};
